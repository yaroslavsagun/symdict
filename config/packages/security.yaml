security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users:
      entity:
        class: App\Entity\User
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: users
      stateless: false
      access_token:
        token_handler: App\Security\AccessTokenHandler
        failure_handler: App\Security\AccessDeniedHandler


      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/auth/(login|register), roles: [ PUBLIC_ACCESS ] }
    - { path: ^/api/auth/logout, roles: [ ROLE_USER, ROLE_ADMIN ] }

    - { path: ^/api/language/create, roles: [ ROLE_ADMIN ] }
    - { path: ^/api/language/\d+/(update|delete), roles: [ ROLE_ADMIN ] }

    - { path: ^/api/word/create, roles: [ ROLE_ADMIN ] }
    - { path: ^/api/word/\d+/(update|delete), roles: [ ROLE_ADMIN ] }

    - { path: ^/api/translation/create, roles: [ ROLE_ADMIN ] }
    - { path: ^/api/translation/\d+/(update|delete), roles: [ ROLE_ADMIN ] }

    - { path: ^/api, roles: [ ROLE_USER, ROLE_ADMIN ] }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
